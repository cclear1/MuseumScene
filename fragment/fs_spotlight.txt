#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform sampler2D first_texture;
uniform vec3 viewPos;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
};
uniform Light light;

struct DirLight {
    vec3 direction;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
uniform DirLight dirLight;

struct SpotLight {
    vec3  position;
    vec3  direction;
    float cutOff;
    float outerCutOff;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
uniform SpotLight spotlight;

struct Material {
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float shininess;
};
uniform Material material;

vec3 CalcLight(Light light, vec3 norm)
{
  // ambient
  vec3 ambient = light.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;

  // diffuse
  vec3 lightDir = normalize(light.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * (diff * material.diffuse) * texture(first_texture, aTexCoord).rgb;

  // specular
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * (spec * material.specular);

  return ambient + diffuse + specular;
}

vec3 CalcDirLight(DirLight light, vec3 norm)
{
  // ambient
  vec3 ambient = light.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;

  // diffuse
  vec3 lightDir = normalize(-light.direction);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * (diff * material.diffuse) * texture(first_texture, aTexCoord).rgb;

  // specular shading
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = light.specular * (spec * material.specular);

  return ambient + diffuse + specular;
}

vec3 CalcSpotLight(SpotLight light, vec3 norm)
{
  // ambient
  vec3 ambient = light.ambient * material.ambient * texture(first_texture, aTexCoord).rgb;

  // diffuse
  vec3 lightDir = normalize(light.position - aPos);
  float diff = max(dot(norm, lightDir), 0.0);
  vec3 diffuse = light.diffuse * (diff * material.diffuse) * texture(first_texture, aTexCoord).rgb;

  // specular
  vec3 viewDir = normalize(viewPos - aPos);
  vec3 reflectDir = reflect(-lightDir, norm);
  float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
  vec3 specular = spotlight.specular * (spec * material.specular);

  // light intensity
  float theta = dot(lightDir, normalize(-spotlight.direction));
  float epsilon = (light.cutOff - spotlight.outerCutOff);
  float intensity = clamp((theta - spotlight.outerCutOff) / epsilon, 0.0, 1.0);
  diffuse *= intensity;
  specular *= intensity;

  return ambient + diffuse + specular;
}

void main() {
  vec3 norm = normalize(aNormal);

  vec3 result = CalcLight(light, norm);
  result += CalcDirLight(dirLight, norm);
  result += CalcSpotLight(spotlight, norm);
  fragColor = vec4(result, 1.0);
}
